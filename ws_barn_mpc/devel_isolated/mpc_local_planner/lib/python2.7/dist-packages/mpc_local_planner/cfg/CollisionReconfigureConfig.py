## *********************************************************
##
## File autogenerated for the mpc_local_planner package
## by the dynamic_reconfigure package.
## Please do not edit.
##
## ********************************************************/

from dynamic_reconfigure.encoding import extract_params

inf = float('inf')

config_description = {'upper': 'DEFAULT', 'lower': 'groups', 'srcline': 246, 'name': 'Default', 'parent': 0, 'srcfile': '/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'cstate': 'true', 'parentname': 'Default', 'class': 'DEFAULT', 'field': 'default', 'state': True, 'parentclass': '', 'groups': [{'upper': 'COLLISION_AVOIDANCE', 'lower': 'collision_avoidance', 'srcline': 124, 'name': 'Collision_avoidance', 'parent': 0, 'srcfile': '/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'cstate': 'true', 'parentname': 'Default', 'class': 'DEFAULT::COLLISION_AVOIDANCE', 'field': 'DEFAULT::collision_avoidance', 'state': True, 'parentclass': 'DEFAULT', 'groups': [], 'parameters': [{'srcline': 20, 'description': 'Specify whether the obstacles in the costmap should be taken into account directly (this is necessary if no seperate clustering and detection is implemented)', 'max': True, 'cconsttype': 'const bool', 'ctype': 'bool', 'srcfile': '/home/turan/3v3/ws_barn_mpc/src/mpc_local_planner/mpc_local_planner/cfg/mpc_collision.cfg', 'name': 'include_costmap_obstacles', 'edit_method': '', 'default': True, 'level': 0, 'min': False, 'type': 'bool'}, {'srcline': 22, 'description': 'Limit the occupied local costmap obstacles taken into account for planning behind the robot (specify distance in meters)', 'max': 10.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '/home/turan/3v3/ws_barn_mpc/src/mpc_local_planner/mpc_local_planner/cfg/mpc_collision.cfg', 'name': 'costmap_obstacles_behind_robot_dist', 'edit_method': '', 'default': 1.5, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 24, 'description': '', 'max': 3.1415, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '/home/turan/3v3/ws_barn_mpc/src/mpc_local_planner/mpc_local_planner/cfg/mpc_collision.cfg', 'name': 'collision_check_min_resolution_angular', 'edit_method': '', 'default': 3.1415, 'level': 0, 'min': -3.1415, 'type': 'double'}, {'srcline': 25, 'description': '', 'max': 100, 'cconsttype': 'const int', 'ctype': 'int', 'srcfile': '/home/turan/3v3/ws_barn_mpc/src/mpc_local_planner/mpc_local_planner/cfg/mpc_collision.cfg', 'name': 'collision_check_no_poses', 'edit_method': '', 'default': -1, 'level': 0, 'min': -1, 'type': 'int'}], 'type': 'tab', 'id': 1}], 'parameters': [], 'type': '', 'id': 0}

min = {}
max = {}
defaults = {}
level = {}
type = {}
all_level = 0

#def extract_params(config):
#    params = []
#    params.extend(config['parameters'])
#    for group in config['groups']:
#        params.extend(extract_params(group))
#    return params

for param in extract_params(config_description):
    min[param['name']] = param['min']
    max[param['name']] = param['max']
    defaults[param['name']] = param['default']
    level[param['name']] = param['level']
    type[param['name']] = param['type']
    all_level = all_level | param['level']

